{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NeighborhoodWriteup","_ref","name","writeUp","keyFeats","react_default","a","createElement","Fragment","className","map","feature","i","key","App","state","activeNeighborhood","handleNeighborhoodClick","neighborhood","_this","setState","document","title","properties","_this2","this","role","aria-label","Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","neighborhoods","Polygon","positions","geometry","coordinates","color","fillColor","fillOpacity","stroke","onClick","App_NeighborhoodWriteup","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootEl","getElementById","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9744a54b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport neighborhoods from \"./neighborhoods.json\";\nimport { Map as LeafletMap, TileLayer, Polygon } from \"react-leaflet\";\n\nconst NeighborhoodWriteup = ({ name, writeUp, keyFeats }) => {\n  return (\n    <React.Fragment>\n      <article className=\"write-up\">\n        <h2>{name}</h2>\n        <p>{writeUp}</p>\n      </article>\n      <aside className=\"key-features\">\n        <h4>Key Features</h4>\n        <ul>\n          {keyFeats.map((feature, i) => (\n            <li key={i}>{feature}</li>\n          ))}\n        </ul>\n      </aside>\n    </React.Fragment>\n  );\n};\nclass App extends Component {\n  state = {\n    activeNeighborhood: null\n  };\n\n  handleNeighborhoodClick = neighborhood => {\n    this.setState({ activeNeighborhood: neighborhood });\n    document.title = neighborhood.properties.name;\n  };\n\n  render() {\n    const { activeNeighborhood } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3 className=\"brand\">\n            <span role=\"img\" aria-label=\"House Emoji\">\n              üè°\n            </span>\n            Explore Denver Neighborhoods\n          </h3>\n        </header>\n        <main className=\"App-main\">\n          <LeafletMap\n            center={[39.714, -104.992]}\n            zoom={12}\n            maxZoom={15}\n            attributionControl={true}\n            zoomControl={true}\n            doubleClickZoom={true}\n            scrollWheelZoom={false}\n            dragging={true}\n            animate={true}\n            easeLinearity={0.35}\n          >\n            <TileLayer url=\"http://{s}.tile.openstreetmap.se/hydda/base/{z}/{x}/{y}.png\" />\n            {neighborhoods.map((neighborhood, i) => (\n              <Polygon\n                key={i}\n                positions={neighborhood.geometry.coordinates}\n                color={neighborhood.properties.fillColor}\n                fillOpacity={0.7}\n                stroke={false}\n                onClick={() => {\n                  this.handleNeighborhoodClick(neighborhood);\n                }}\n              />\n            ))}\n          </LeafletMap>\n          <section className=\"neighborhood-detail\">\n            {!!activeNeighborhood ? (\n              <NeighborhoodWriteup\n                name={activeNeighborhood.properties.name}\n                writeUp={activeNeighborhood.properties.writeUp}\n                keyFeats={activeNeighborhood.properties.keyFeats}\n              />\n            ) : (\n              <h4>Select a neighborhood</h4>\n            )}\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}